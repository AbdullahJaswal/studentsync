services:
    ss-frontend:
        build:
            context: ./frontend/
            dockerfile: prod.Dockerfile
        container_name: ss-frontend
        entrypoint: /frontend/prod.entrypoint.sh
        volumes:
            - node_modules:/frontend/node_modules
            - ./frontend:/frontend
        ports:
            - "3000:3000"
        networks:
            - staging
        depends_on:
            - ss-backend

    ss-backend:
        build:
            context: ./backend/
            dockerfile: prod.Dockerfile
        container_name: ss-backend
        entrypoint: /backend/prod.entrypoint.sh
        volumes:
            - ./backend:/backend
            - static:/backend/static
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "8000:8000"
        env_file:
            - ./backend/.env.dev
        networks:
            - staging
        depends_on:
            - ss-db

    ss-db:
        image: postgres:16-alpine
        container_name: ss-db
        ports:
            - "5432:5432"
        environment:
            - POSTGRES_USER=studentsync
            - POSTGRES_PASSWORD=studentsync
            - POSTGRES_DB=studentsync
            - PGDATA=/tmp
        volumes:
            - db_data:/var/lib/postgresql/data
        networks:
            - staging

    ss-redis:
        image: redis:latest
        container_name: an-redis
        ports:
            - "6379:6379"
        command: redis-server --appendonly yes
        volumes:
            - redis_data:/data
        networks:
            - staging

volumes:
    static:
    node_modules:
    db_data:
    redis_data:

networks:
    staging:
        driver: bridge
        ipam:
            config:
                -   subnet: 16.28.0.0/16
                    gateway: 16.28.0.1
